// GLOBAL VARS
	$aside-width		: 250px;
	$user-area-width	: 170px;
	$base-font-size		: 16px;

// COLORS
	// bg colors
	$bg-dark-color		: #21282E;
	$bg-yellow-color	: #FED700;
	$bg-orange-color	: #FF4933;

	// font colors
	$color-light-white	: #F6F6F6;
	$color-light-black	: #1F262C;
	$color-gray			: #9E9E9E;
	$color-light-gray	: #DDD;
	$color-light-gray-2	: #B8B8B8;
	$color-light-blue	: #00B3D3;
	$color-light-green	: #BBCC29;
	$color-dark-red		: #993300;
	$color-red			: #D80000;

// MIXINS
	@mixin bg ($filename, $bgcolor: null, $pos: 0 0, $repeat:no-repeat) {
		background: $bgcolor url('../../assets/images/' + $filename) $pos $repeat;
	}

	@mixin gradient ($img, $from, $to, $pos: 0 0, $repeat: repeat) {
		background-image: radial-gradient(circle at center, $from 0%, $to 100%), url('../../assets/images/' + $img);
		background-repeat: $repeat;
		background-position: $pos;
	}

	// REM UNIVERSAL MIXIN (with fallbacks)
		@mixin rem($property, $values) {
			$font-size: $base-font-size;
			$px-values: ();
			$rem-values: ();

			@each $value in $values {
				@if $value == 0 or $value == 0px {
					$px-values: join($px-values, 0);
					$rem-values: join($rem-values, 0);
				} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
					$new-rem-value: $value / $font-size;
					$px-values: join($px-values, round($value));
					$rem-values: join($rem-values, #{$new-rem-value}rem);
				} @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
					$px-values: join($px-values, #{$value});
					$rem-values: join($rem-values, #{$value});
				} @else if $value == auto {
					$px-values: join($px-values, auto);
					$rem-values: join($rem-values, auto);
				} @else {
					$px-values: join($px-values, round($value * $font-size));
					$rem-values: join($rem-values, #{$value}rem);
				}
			}
			#{$property}: $px-values;
			#{$property}: $rem-values;
		}
			@mixin fz($fz) {
				@include rem(font-size, $fz);
			}